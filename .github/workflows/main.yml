# .github/workflows/main.yml
name: Kittygram workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r ./backend/requirements.txt
    # Запускаем flake8
    - name: Test backend with flake8
      run: python -m flake8 backend/
  build_and_push_to_docker_hub:
    runs-on: ubuntu-latest
    needs: tests
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to Docker 
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_LOGIN }} 
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    - name: Build&push backend to DockerHub
      uses: docker/build-push-action@v4
      with:
        context: ./backend/
        push: true
        tags: ${{ secrets.DOCKERHUB_LOGIN }}/kittygram_backend:latest
    - name: Build&push frontend to DockerHub
      uses: docker/build-push-action@v4
      with:
        context: ./frontend/
        push: true
        tags: ${{ secrets.DOCKERHUB_LOGIN }}/kittygram_frontend:latest 
    - name: Build&push gateway to DockerHub
      uses: docker/build-push-action@v4
      with:
        context: ./nginx/
        push: true
        tags: ${{ secrets.DOCKERHUB_LOGIN }}/kittygram_gateway:latest
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Push docker-compose via ssh
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.production.yml"
        target: "/home/kittygram"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd /home/kittygram
          echo -e "${{ secrets.ENV_CONTENT }}" > .env
          sudo docker compose -f docker-compose.production.yml pull
          sudo docker compose -f docker-compose.production.yml down
          sudo docker compose -f docker-compose.production.yml up -d
  auto_tests:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install -r ./backend/requirements.txt
    - name: Run pytest
      run: pytest
  telegram-notify:
    runs-on: ubuntu-latest
    needs: [tests, build_and_push_to_docker_hub, deploy, auto_tests]
    if: always()
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_USER }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          **${{ github.actor }}** commited: **${{ github.event.commits[0].message }}**
          
          Workflow actions status:
          tests: **${{ needs.tests.result }}**
          build_and_push_to_docker_hub: **${{ needs.build_and_push_to_docker_hub.result }}**
          deploy: **${{ needs.deploy.result }}**
          auto_tests: **${{ needs.auto_tests.result }}**
          
          https://github.com/${{ github.repository }}/commit/${{ github.sha }}
